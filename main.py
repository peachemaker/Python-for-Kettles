def callback(event):
    webbrowser.open_new(r"https://drive.google.com/file/d/1NRlKFqbK6yRVtVD0Fz2xqVFB8_LjaKT9/view?usp=sharing")
def linkege(event):
    webbrowser.open_new(r"https://inf-ege.sdamgia.ru/test?theme=423")
def add_label1():
    label1=tk.Label(win, text='                                                       ТИПЫ ДАННЫХ В PYTHON \n\n'
                             ' • int (integer) — целочисленные данные, ограниченные лишь оперативной памятью.\n'
                             ' • float — вещественные числа (числа с дробной частью).\n'
                             ' • str (string) — строка любых символов из таблицы Unicode.\n'
                             ' • bool (boolean) — логические данные, принимающие значения True или False.\n\n'
                             '                                                       ВВОД И ВЫВОД ДАННЫХ\n\n'
                             ' • а = int (input ()) — ввод пользователем целого числа.\n'
                             ' • а = float (input ()) — ввод пользователем вещественного числа.\n'
                             ' • print(a) — вывод информации, хранящейся в переменной a.\n\n'
                             '                                         ОСНОВНЫЕ СИМВОЛЫ ИСПОЛЬЗУЮЩИЕСЯ В PYTHON\n\n'
                             ' "//" — выделение целой части числа при делении.\n'
                             ' "%" — выделение остатка числа при делении.\n'
                             ' "*" — умножение чисел.\n'
                             ' "+/-" — сложение/вычитание чисел.\n'
                             ' "/" — деление чисел.\n'
                             ' "**" — возведение числа в степень.\n\n'
                             '                                            УПРОЩЕНИЕ НЕКОТОРЫХ ОПЕРАЦИЙ\n\n'
                             ' а = а + b  →  a+=b\n'
                             ' а = а - ь  →  а -= Ь\n'
                             ' а = а * ь  →  а *= b\n'
                             ' а = а / ь  →  а /= b\n'
                             ' а = а * * 2 →  а ** = 2',
                   width=98, height=32, anchor='nw', justify='left', font=('Arial Unicode MS',8,'bold'))
    label1.place(x=252, y=100)
def add_label2():
    label2=tk.Label(win, text='                                         УСЛОВНЫЙ ОПЕРАТОР\n\n'
                              '   if <условие>:                                 • В данной конструкции проверяется выполнение какого-либо условия: \n'
                              '     <блок_операторов_1>                    если условие соблюдается, то программа идёт по ветке if выполняя \n'
                              '   else:                                                действие, иначе программа идёт по ветке else выполняя другое действие.\n'
                              '     <блок_операторов_2>\n\n'
                              '                                         ЛОГИЧЕСКИЕ ВЫРАЖЕНИЯ\n\n'
                              ' В качестве условий используются логические выражения:\n\n'
                              ' • Простые — записанные с помощью операций отношения, такие как:\n'
                              '   >=/<= — больше или равно/меньше или равно значению.\n'
                              '   ==/!= — равно/не равно значению.\n'
                              ' • Составные — записанные с помощью логических операций, такие как:\n'
                              '   and — логическое умножение. Проверяет одновременное выполнение нескольких условий.\n'
                              '   or — логическое сложение. Проверяет выполнение хотя бы одного из условий.\n\n'
                              '                    КОНСТРУКЦИЯ УСЛОВНОГО ОПЕРАТОРА ДЛЯ ВЫБОРА ИЗ НЕСКОЛЬКИХ ВАРИАНТОВ\n\n'
                              ' if <условие>:                                  • Если после else сразу следует ещё один оператор if, можно\n'                              '  '
                              '   <операторы>                                использовать так называемое «каскадное» ветвление с ключевыми\n'
                              ' elif <условие>:                                  словами elif (сокращение от else-if). Если очередное условие\n'
                              '   <операторы>                                  ложно, то выполняется проверка следующего условия и т. д.\n'
                              ' else:\n'
                              '   <операторы>\n\n'
                              '                                               ВАЖНО ПОМНИТЬ!\n\n'
                              ' • Слова if и else начинаются на одном уровне, а все команды внутренних блоков сдвинуты относительно этого\n'
                              ' уровня вправо на одно и то же расстояние. Начало и конец блока, который выполняется при истинности\n'
                              ' (ложности) условия,определяется именно этими сдвигами.\n'

,
                   width=98, height=32, anchor='nw', justify='left',font=('Arial Unicode MS',8,'bold'))
    label2.place(x=252, y=100)
def add_label3():
    label3=tk.Label(win, text='                               ОПЕРАТОР WHILE \n\n'
                              '   while <условие>:            while(в перевод. с англ."до тех пор","пока")\n'
                              '        <операторы>            • <условие> — логическое выражение, условие продолжения работы цикла; пока оно\n'
                              '                                       истинно, выполняется тело цикла; если условие ложно с самого начала, тело цикла\n'
                              '                                       не выполнится ни разу;\n'
                              '                                        • <операторы> — один или несколько операторов, с помощью\n'
                              '                                       которых записано тело цикла.\n\n'
                              '                               ОПЕРАТОР FOR\n\n'
                              '   for <параметр> in range(k, n, m):           Цикл с известным числом повторений в языке Python записывается с\n'
                              '       <операторы>                                    помощью оператора for (в переводе с английского — «для»)\n'
                              '                                                              • <параметр> — переменная целого типа;\n'
                              '                                                              • range () — функция, описывающая необходимое количество повторов \n'
                              '                                                              тела цикла; в скобках может быть указано от одного до трёх чисел: \n'
                              '                                                              • одно число (n) указывает на то, что нужно последовательно\n'
                              '                                                              перебрать все целые числа от 0 до n - 1;\n'
                              '                                                              • два числа (k, n) говорят о том, что нужно последовательно\n'
                              '                                                              перебрать все целые числа, находящиеся в диапазоне от k\n'
                              '                                                              (начальное значение) до n - 1 (конечное значение);\n'
                              '                                                              • три числа (k, n, m) указывают на то, что параметр должен\n'
                              '                                                              изменяться от k до n - 1 с шагом, равным m;\n'
                              '                                                              • <операторы> — один или несколько операторов, составляющих цикл.\n\n'
                              '                                          ВАЖНО ПОМНИТЬ!\n\n'
                              ' • Если условие в заголовке цикла всегда остаётся истинным, цикл работает бесконечно.\n'
                              ' • Если условие в заголовке цикла ложно с самого начала, тело цикла не выполнится ни разу.\n'
                              ' • Если число повторений тела цикла известно, то лучше воспользоваться оператором for,\n' 
                              '   в остальных случаях используется оператор while.\n'
                              ' • Для досрочного выхода из цикла используют оператор break.\n',
                   width=98, height=32, anchor='nw', justify='left',font=('Arial Unicode MS',8,'bold') )
    label3.place(x=252, y=100)
def add_label4():
    label4=tk.Label(win, text='                                      СТРОЕНИЕ МАССИВА\n\n'
                              ' Нумерация элементов массивов в Python всегда начинается с нуля.\n'
                              ' Для того чтобы обратиться к элементу массива, записывают имя массива, а после него в квадратных скобках\n'
                              ' указывают индекс нужного элемента.\n\n'
                              '                                     ЗАПОЛНЕНИЕ МАССИВА\n\n'
                              ' • Перечисление значений элементов. Массив можно создать\n'
                              ' перечислением элементов через запятую в квадратных скобках,например, так:\n'
                              ' А = [1, 2, -3, 5, 7] .\n'
                              ' С помощью записи D = [1] * 5  будет создан массив из пяти элементов, каждый из которых равен 1.\n\n'
                              ' • Ввод значений элементов с клавиатуры. Небольшие массивы можно вводить с клавиатуры.\n' 
                              ' Для этого можно использовать цикл с параметром, выполняющий оператор ввода отдельно для\n'
                              ' каждого элемента массива:\n'
                              '  for i in range(N):\n'
                              '    A[i] = int(input())\n\n'
                              ' • Заполнение массива случайными числами.\n'
                              '  from random import randint\n'
                              '  for i in range(N):\n'
                              '    A[i] = randint(10, 110)\n\n'
                              '                                      ДЕЙСТВИЯ С МАССИВАМИ\n\n'
                              ' • len(my_array) — содержит информацию о длине массива "my_array".\n'
                              ' • my_array.append(x) — добавляет в конец массива "my_array" элемент "x".\n'
                              ' • my_array.pop() — удаляет последний элемент массива "my_array".\n'
                              ' • my_array.remove(x) — удаляет элемент "x" из массива "my_array".\n'
                              ' • my_array.reverse() — разворачивает массив "my_array".\n'
                              ' • my_array.count(x) — указывает количество элементов "x" в массиве "my_array".\n',
                   width=98, height=32, anchor='nw', justify='left',font=('Arial Unicode MS',8,'bold'))
    label4.place(x=252, y=100)
def add_label5():
    label5=tk.Label(win, text='                                      РЕШЕНИЕ 17 ЗАДАНИЯ ИЗ ЕГЭ НА ЯЗЫКЕ PYTHON\n\n'
                              ' В файле содержится последовательность целых чисел. Элементы последовательности могут принимать\n'
                              ' целые значения от −10000 до 10000 включительно. Определите и запишите в ответе сначала количество\n'
                              ' пар элементов последовательности, в которых хотя бы одно число делится на 3, затем максимальную из\n'
                              ' сумм элементов таких пар. В данной задаче под парой подразумевается два идущих подряд элемента\n'
                              ' последовательности.\n\n'
                              '  f=open("17.txt")           — открываем файл в переменую "f".\n'
                              '  count=0                    — создаём счётчик пар в которых хотя бы одно число делится на 3.\n'
                              '  sm=-20000                  — создаём переменную в которой будет максимальная сумма из всех пар.\n'
                              '  n1=int(f.readline())       — считываем первую строчку(число).\n'
                              '  for s in f.readlines():    — создаём цикл в диапазоне документа.\n'
                              '      n2=int(s)              — считываем вторую строчку(число).\n'
                              '      if n1%3==0 or n2%3==0: — создаём ветвление с условием что хотя бы одно число делится на 3 без остатка.\n'
                              '          count+=1           — увеличиваем количество подходящих пар на 1.\n'
                              '          sm=max(n1+n2,sm)   — сравниваем сумму пары и переменную "sm". Заносим в переменную "sm"\n'
                              '                                             наибольшее из них.\n'
                              '      n1=n2                  — заносим в переменную "n1" значение из "n2".\n'
                              '  print(count,sm)            — выводим количество пар и максимальную сумму из таких пар.\n\n'
                              '                                          ВАЖНО ПОМНИТЬ!\n\n'
                              ' • Чтобы подключить файл с данными к программе необходимо сделать так чтобы файл с программой и файл\n'
                              ' с данными имели идентичный путь в каталоге (т.е. имели общее местоположение).\n\n'
                              '                            РЕКОМЕНДАЦИИ ПО РЕШЕНИЮ ЗАДАЧ С ПОМОЩЬЮ ЯЗЫКА PYTHON\n\n'
                              ' • С помощью языка Python в ЕГЭ по информатике решаются 16, 17, 24, 25, 26, 27 задания. В таких задачах\n'
                              ' важно понимать за что отвечает конкретная строчка в коде. Заучивать программы не имеет смысла так как\n'
                              ' они достаточно большие и их довольно много. Старайтесь перед написанием кода продумать что конкретно\n'
                              ' должна делать эта программа (нажмите левой кнопкой мыши на текст чтобы прорешать похожие задачи).\n',
                   width=98, height=32, anchor='nw', justify='left',font=('Arial Unicode MS',8,'bold'))
    label5.place(x=252, y=100)
    label5.bind("<Button-1>", linkege)
def add_label6():
    label6=tk.Label(win, text='                            ОСНОВНЫЕ АСПЕКТЫ СОЗДАНИЯ ЧАТ-БОТА В VK\n\n'
                              '                                Первый этап (работа с сообществом)    \n\n'
                              ' 1. Создайте сообщество в социальной сети ВКонтакте на любую тему.\n'
                              ' 2. Зайдите в раздел "Управление" и найдите пункт "Работа с API". Нажимаем кнопку «Создать ключ».\n'
                              '     В появившемся окошке разрешаем все, ставим все галочки. Подтверждаем номер телефона и сохраняем\n'
                              '     куда-нибудь ключ доступа.\n'
                              ' 3. Там же находим пункт "Сообщения". В строке "Сообщения собщества" выбираем "Включено".\n'
                              ' 4. Из пункта "Сообщения" переходим в подпункт "Настройки для бота".\n'
                              '     В строке "Возможности ботов" выбираем "Включено" и внизу ставим галочки во всех полях.\n\n' 
                              '                                     Второй этап (работа с кодом)          \n\n'
                              ' 1. Создайте python файл в привычном для вас редакторе кода (PyCharm, Visual Studio и др.).\n'
                              ' 2. Скачайте библиотеку vk_api в интернете и установите её в терминале с помощью команды "pip install vk_api".\n'
                              ' 3. Используйте сохранённый ключ доступа в своей программе.\n'
                              ' 4. Нажмите левой кнопкой мыши на любое место в этом окне. Скопируйте код программы из открывшейся\n'
                              '     ссылки (ссылка откроется при наличии доступа в Интернет). Вставьте код в свой редактор и\n'
                              '     запустите программу. Напишите "привет" в сообщения созданного вами сообщества.\n'
                              '     Бот должен ответить в течении 3 секунд.\n'
                              ' 5. Дальше ваш полёт фантазии. Добавляйте фразы ответов бота, меняйте старые условия ответа как вам\n'
                              '     нравится. Не ограничивайте себя;)\n\n'
                              '                                          ВАЖНО ПОМНИТЬ!\n\n'
                              ' • Бот будет работать только пока код программы запущен. Именно поэтому важно работать в редакторе кода,\n'
                              ' а не в текстовом документе IDLE, так как в этом случае программа отработает и выключится не дав результата\n'
                              ' Ещё одно важное преимущество редактора кода в том, что он конкретно указывает на ошибки в коде в режиме\n'
                              ' реального времени т.е. не требуя запуска программы.',
                   width=98, height=32, anchor='nw', justify='left',font=('Arial Unicode MS',8,'bold'))
    label6.place(x=252, y=100)
    label6.bind("<Button-1>", callback)

import tkinter as tk
import webbrowser
win=tk.Tk()


win.config(bg='blue')
win.title('Python for kettles')
win.geometry('950x600+200+50')
win.resizable(False, False)


label_1=tk.Label(win, text='Руководство по Python',
                 bg='yellow',
                 fg='black',
                 font=('Bodoni MT Black',24,'bold'),
                 padx=271,
                 pady=20,
                 width=17,
                 height=1,
                 relief=tk.RAISED,
                 bd=10)
label_1.place(x=9, y=0)
btn_1=tk.Button(win, text='Основные конструкции',font=('Bodoni MT Black',10,'bold'),
                command=add_label1,
                width=25,
                height=4,
                relief=tk.RAISED,bd=4, bg='red')
btn_2=tk.Button(win, text='Ветвление',font=('Bodoni MT Black',10,'bold'),
                command=add_label2,
                width=25,
                height=4,
                relief=tk.RAISED, bd=4,bg='red')
btn_3=tk.Button(win, text='Циклы',font=('Bodoni MT Black',10,'bold'),
                command=add_label3,
                width=25,
                height=4,
                relief=tk.RAISED, bd=4,bg='red')
btn_4=tk.Button(win, text='Массивы',font=('Bodoni MT Black',10,'bold'),
                command=add_label4,
                width=25,
                height=4,
                relief=tk.RAISED, bd=4,bg='red')
btn_5=tk.Button(win, text='Примеры',font=('Bodoni MT Black',10,'bold'),
                command=add_label5,
                width=25,
                height=4,
                relief=tk.RAISED, bd=4,bg='red')
btn_6=tk.Button(win, text='Как создать чат-бот в ВК',font=('Bodoni MT Black',10,'bold'),
                command=add_label6,
                width=25,
                height=4,
                relief=tk.RAISED, bd=4,bg='red')
btn_1.place(x=7, y=100)
btn_2.place(x=7, y=183)
btn_3.place(x=7, y=266)
btn_4.place(x=7, y=349)
btn_5.place(x=7, y=432)
btn_6.place(x=7, y=515)


win.mainloop()